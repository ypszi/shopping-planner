{% macro recursiveComments(comment) %}
    {% if comment is array %}
        {% for key in comment|keys %}
            {% if key is string %}
                <li>{{ key }}</li>
            {% endif %}
        {% endfor %}

        <ul>
            {% for key, subComment in comment %}
                {{ _self.recursiveComments(subComment) }}
            {% endfor %}
        </ul>
    {% else %}
        <li>{{ comment }}</li>
    {% endif %}
{% endmacro %}

<!doctype html>
<html lang="en">
{% include 'head.html.twig' %}
<body onload="ingredientsViewInit();">
<div class="container-fluid">
    <div id="bevasarlokozpont">
        <h1 class="display-6 text-success">Bevásárlóközpont:</h1>
        <p>{{ supermarket.name }}</p>
    </div>

    <div id="foods" class="table-responsive">
        <h1 class="display-6 text-success">Ételek ({{ foods.toArray|length }} db):</h1>
        <table class="table table-bordered">
            <thead class="bg-light-orange">
                <tr>
                    <th scope="col">Kép</th>
                    <th scope="col">Étel</th>
                    <th scope="col">Recept</th>
                    <th scope="col">Kommentek</th>
                </tr>
            </thead>
            <tbody class="table-group-divider">
                {% for food in foods.toArray %}
                    <tr>
                        <td class="row-thumbnail">
                            <div class="food-thumbnail col-sm-12 col-md-8 col-lg-6 col-xl-4">
                                {% if food.thumbnailUrl %}
                                    <img src="{{ food.thumbnailUrl }}" alt="{{ food }}" class="img-fluid img-thumbnail">
                                {% endif %}
                            </div>
                        </td>
                        <td>{{ food }}</td>
                        <td><a href="{{ food.recipeUrl }}" target="_blank">{{ food.recipeUrl }}</a></td>
                        <td>
                            {% from _self import recursiveComments %}
                            {% for comment in food.comments %}
                                {{ recursiveComments(comment) }}
                            {% endfor %}
                        </td>
                    </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>

    <hr class="border">
    <h3>Nézet</h3>
    <div class="navbar d-inline-block form-check-inline">
        <input
                type="radio"
                name="view-switch"
                id="ingredients-view-type-summary"
                class="btn-check"
                autocomplete="off"
                value="summary"
                onchange="ingredientsViewToggle(this)"
        >
        <label for="ingredients-view-type-summary" class="btn btn-outline-info">
            Hozzávalók összesítve
        </label>
    </div>
    <div class="navbar d-inline-block form-check-inline">
        <input
                type="radio"
                name="view-switch"
                id="ingredients-view-type-by-food"
                class="btn-check"
                autocomplete="off"
                value="byFood"
                onchange="ingredientsViewToggle(this)"
        >
        <label for="ingredients-view-type-by-food" class="btn btn-outline-info">
            Hozzávalók ételek szerint
        </label>
    </div>
    <div class="navbar d-inline-block form-check-inline">
        <input
                type="radio"
                name="view-switch"
                id="ingredients-view-type-unfiltered-summary"
                class="btn-check"
                autocomplete="off"
                value="summaryUnfiltered"
                onchange="ingredientsViewToggle(this)"
        >
        <label for="ingredients-view-type-unfiltered-summary" class="btn btn-outline-info">
            Összes oszlop, hozzávalók összesítve
        </label>
    </div>
    <div class="navbar d-inline-block form-check-inline">
        <input
                type="radio"
                name="view-switch"
                id="ingredients-view-type-unfiltered-by-food"
                class="btn-check"
                autocomplete="off"
                value="byFoodUnfiltered"
                onchange="ingredientsViewToggle(this)"
        >
        <label for="ingredients-view-type-unfiltered-by-food" class="btn btn-outline-info">
            Összes oszlop, hozzávalók ételek szerint
        </label>
    </div>
    <hr class="border">

    <div id="ingredients-summary" class="table-responsive shopping-list">
        <h3 class="text-success">Hozzávalók összesítve ({{ shoppingList.getRows|length }} sor):</h3>
        <table class="table table-bordered table-responsive">
            <thead class="bg-light-orange">
                <tr>
                    {% for header in shoppingList.getHeader %}
                        <th scope="col">{{ header }}</th>
                    {% endfor %}
                </tr>
            </thead>
            <tbody class="table-group-divider">
                {% for rowId, row in shoppingList.getRows %}
                    <tr>
                        {% for colId, col in row %}
                            {% set cellId = rowId ~ '-' ~ colId %}
                            <td>
                                <span
                                        id="ingredient-cell-label-{{ cellId }}"
                                        class="form-check-label ingredient"
                                        onclick="this.classList.contains('ingredient-done')
                                        ? this.classList.remove('ingredient-done')
                                        : this.classList.add('ingredient-done')"
                                >
                                    {{ col }}
                                </span>
                            </td>
                        {% endfor %}
                    </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>

    <div id="ingredients-by-food" class="table-responsive shopping-list">
        <h3 class="text-success">Hozzávalók ételek szerint ({{ totalRowCountByFood }} sor):</h3>
        <table class="table table-bordered table-responsive">
            <thead>
                <tr>
                    <th scope="col"></th>
                    {% for header in shoppingListByFood.getHeader %}
                        <th scope="col" class="bg-light-orange">{{ header }}</th>
                    {% endfor %}
                </tr>
            </thead>
            <tbody class="table-group-divider">
                {% for foodName, rows in shoppingListByFood.getRows %}
                    {% for rowId, row in rows %}
                        {% set isFirstRow = rowId == 0 %}
                        <tr class="{% if isFirstRow %}border-top{% endif %}">
                            <td class="{% if isFirstRow %}bg-light-orange{% endif %}">
                                {% if isFirstRow %}{{ foodName }}{% endif %}
                            </td>
                            {% for colId, col in row %}
                                {% set cellId = rowId ~ '-' ~ colId %}
                                <td>
                                        <span
                                                id="ingredient-cell-label-{{ cellId }}"
                                                class="form-check-label ingredient"
                                                onclick="this.classList.contains('ingredient-done')
                                                ? this.classList.remove('ingredient-done')
                                                : this.classList.add('ingredient-done')"
                                        >
                                            {{ col }}
                                        </span>
                                </td>
                            {% endfor %}
                        </tr>
                    {% endfor %}
                {% endfor %}
            </tbody>
        </table>
    </div>

    <div id="unfiltered-ingredients-summary" class="table-responsive shopping-list">
        <h3 class="text-success">Hozzávalók összesítve ({{ unfilteredShoppingList.getRows|length }} sor):</h3>
        <table class="table table-bordered table-responsive">
            <thead class="bg-light-orange">
                <tr>
                    {% for header in unfilteredShoppingList.getHeader %}
                        <th scope="col">{{ header }}</th>
                    {% endfor %}
                </tr>
            </thead>
            <tbody class="table-group-divider">
                {% for rowId, row in unfilteredShoppingList.getRows %}
                    <tr>
                        {% for colId, col in row %}
                            {% set cellId = rowId ~ '-' ~ colId %}
                            <td>
                                <span
                                        id="ingredient-cell-label-{{ cellId }}"
                                        class="form-check-label ingredient"
                                        onclick="this.classList.contains('ingredient-done')
                                        ? this.classList.remove('ingredient-done')
                                        : this.classList.add('ingredient-done')"
                                >
                                    {{ col }}
                                </span>
                            </td>
                        {% endfor %}
                    </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>

    <div id="unfiltered-ingredients-by-food" class="table-responsive shopping-list">
        <h3 class="text-success">Hozzávalók ételek szerint ({{ totalRowCountByFood }} sor):</h3>
        <table class="table table-bordered table-responsive">
            <thead>
                <tr>
                    <th scope="col"></th>
                    {% for header in unfilteredShoppingListByFood.getHeader %}
                        <th scope="col" class="bg-light-orange">{{ header }}</th>
                    {% endfor %}
                </tr>
            </thead>
            <tbody class="table-group-divider">
                {% for foodName, rows in unfilteredShoppingListByFood.getRows %}
                    {% for rowId, row in rows %}
                        {% set isFirstRow = rowId == 0 %}
                        <tr class="{% if isFirstRow %}border-top{% endif %}">
                            <td class="{% if isFirstRow %}bg-light-orange{% endif %}">
                                {% if isFirstRow %}{{ foodName }}{% endif %}
                            </td>
                            {% for colId, col in row %}
                                {% set cellId = rowId ~ '-' ~ colId %}
                                <td>
                                        <span
                                                id="ingredient-cell-label-{{ cellId }}"
                                                class="form-check-label ingredient"
                                                onclick="this.classList.contains('ingredient-done')
                                                ? this.classList.remove('ingredient-done')
                                                : this.classList.add('ingredient-done')"
                                        >
                                            {{ col }}
                                        </span>
                                </td>
                            {% endfor %}
                        </tr>
                    {% endfor %}
                {% endfor %}
            </tbody>
        </table>
    </div>

    <div id="drug-summary" class="table-responsive">
        <h3 class="text-success">Drogéria ({{ drugShoppingList.rows|length }} sor):</h3>
        <table class="table table-bordered table-responsive">
            <thead class="bg-light-orange">
                <tr>
                    {% for header in drugShoppingList.header %}
                        <th scope="col">{{ header }}</th>
                    {% endfor %}
                </tr>
            </thead>
            <tbody class="table-group-divider">
                {% for rowId, row in drugShoppingList.rows %}
                    <tr>
                        {% for colId, col in row %}
                            {% set cellId = rowId ~ '-' ~ colId %}
                            <td>
                                <span
                                        id="drug-cell-label-{{ cellId }}"
                                        class="form-check-label ingredient"
                                        onclick="this.classList.contains('ingredient-done')
                                        ? this.classList.remove('ingredient-done')
                                        : this.classList.add('ingredient-done')"
                                >
                                    {{ col }}
                                </span>
                            </td>
                        {% endfor %}
                    </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>

    <div class="sticky-bottom">
        <div class="row justify-content-center sticky-bottom-btn-row">
            <a href="/?{{ plannedShopping }}" class="btn btn-warning col-3 text-center" title="MODIFY">⬅️</a>
            <div class="col-1"></div>
            <a href="{{ ingredientStorageUrl }}" class="btn btn-info col-3 text-center" title="STORAGE">📦</a>
            <div class="col-1"></div>
            <a href="/" class="btn btn-secondary col-3 text-center" title="HOME">🏠</a>
        </div>
    </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
<script>
    {% include 'dark-theme.js.twig' %}

    const ingredientsViewTypeSummary = 'summary';
    const ingredientsViewTypeByFood = 'byFood';
    const ingredientsViewTypeUnfilteredSummary = 'summaryUnfiltered';
    const ingredientsViewTypeUnfilteredByFood = 'byFoodUnfiltered';

    function ingredientsViewInit() {
        const viewSwitches = document.getElementsByName('view-switch');
        const shoppingLists = document.getElementsByClassName('shopping-list');

        if (!viewSwitches || !shoppingLists) {
            return;
        }

        viewSwitches.forEach((viewSwitch) => {
            viewSwitch.checked = false;
        });

        Array.from(shoppingLists).forEach((shoppingList) => {
            shoppingList.classList.add('d-none');
        });

        const ingredientsViewType = getCookie('ingredientsView');

        switch (ingredientsViewType) {
            case ingredientsViewTypeUnfilteredSummary:
                document.getElementById('ingredients-view-type-unfiltered-summary').checked = true;
                document.getElementById('unfiltered-ingredients-summary').classList.remove('d-none');
                document.cookie = createIngredientsViewCookieString(ingredientsViewTypeUnfilteredSummary);

                break;
            case ingredientsViewTypeUnfilteredByFood:
                document.getElementById('ingredients-view-type-unfiltered-by-food').checked = true;
                document.getElementById('unfiltered-ingredients-by-food').classList.remove('d-none');
                document.cookie = createIngredientsViewCookieString(ingredientsViewTypeUnfilteredByFood);

                break;
            case ingredientsViewTypeByFood:
                document.getElementById('ingredients-view-type-by-food').checked = true;
                document.getElementById('ingredients-by-food').classList.remove('d-none');
                document.cookie = createIngredientsViewCookieString(ingredientsViewTypeByFood);

                break;
            case ingredientsViewTypeSummary:
            default:
                document.getElementById('ingredients-view-type-summary').checked = true;
                document.getElementById('ingredients-summary').classList.remove('d-none');
                document.cookie = createIngredientsViewCookieString(ingredientsViewTypeSummary);

                break;
        }

        return;
    }

    function ingredientsViewToggle(input) {
        if (input.checked) {
            document.cookie = createIngredientsViewCookieString(input.value);

            ingredientsViewInit();

            return;
        }

        return;
    }

    {% include 'cookie-handler.scripts.js.twig' %}
</script>
